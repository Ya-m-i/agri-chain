import{c as u,f as N,p as l}from"./index-CizZKi4t.js";/**
 * @license lucide-react v0.503.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const g=[["path",{d:"M5 12h14",key:"1ays0h"}],["path",{d:"M12 5v14",key:"s699le"}]],F=u("plus",g),h=N(l((e,m)=>({adminNotifications:[],farmerNotifications:{},unreadAdminCount:0,unreadFarmerCount:0,addAdminNotification:o=>{e(t=>({adminNotifications:[{...o,read:!1},...t.adminNotifications],unreadAdminCount:t.unreadAdminCount+1}))},addFarmerNotification:(o,t)=>{e(r=>{const n=r.farmerNotifications[t]||[];return{farmerNotifications:{...r.farmerNotifications,[t]:[{...o,read:!1},...n]},unreadFarmerCount:r.unreadFarmerCount+1}})},markAdminNotificationsAsRead:()=>{e(o=>({adminNotifications:o.adminNotifications.map(t=>({...t,read:!0})),unreadAdminCount:0}))},markFarmerNotificationsAsRead:o=>{e(t=>{const r=t.farmerNotifications[o]||[],n=r.filter(a=>!a.read).length;return{farmerNotifications:{...t.farmerNotifications,[o]:r.map(a=>({...a,read:!0}))},unreadFarmerCount:Math.max(0,t.unreadFarmerCount-n)}})},removeNotification:(o,t)=>{e(r=>{const n=r.farmerNotifications[t]||[],a=n.find(c=>c.id===o),i=n.filter(c=>c.id!==o),f=a&&!a.read,d={farmerNotifications:{...r.farmerNotifications,[t]:i},unreadFarmerCount:f?Math.max(0,r.unreadFarmerCount-1):r.unreadFarmerCount};return setTimeout(()=>{try{const c=localStorage.getItem("notification-storage");if(c){const s=JSON.parse(c);s.state={...s.state,...d},localStorage.setItem("notification-storage",JSON.stringify(s))}}catch(c){console.error("Error updating localStorage:",c)}},0),d})},removeAdminNotification:o=>{e(t=>{const r=t.adminNotifications.find(i=>i.id===o),n=t.adminNotifications.filter(i=>i.id!==o),a=r&&!r.read;return{adminNotifications:n,unreadAdminCount:a?Math.max(0,t.unreadAdminCount-1):t.unreadAdminCount}})},getFarmerNotifications:o=>m().farmerNotifications[o]||[],getFarmerUnreadCount:o=>(m().farmerNotifications[o]||[]).filter(r=>!r.read).length,clearFarmerNotifications:o=>{e(t=>{const n=(t.farmerNotifications[o]||[]).filter(i=>!i.read).length,a={farmerNotifications:{...t.farmerNotifications,[o]:[]},unreadFarmerCount:Math.max(0,t.unreadFarmerCount-n)};return setTimeout(()=>{try{const i=localStorage.getItem("notification-storage");if(i){const f=JSON.parse(i);f.state={...f.state,...a},localStorage.setItem("notification-storage",JSON.stringify(f))}}catch(i){console.error("Error updating localStorage:",i)}},0),a})},clearNotifications:()=>{e({adminNotifications:[],farmerNotifications:{},unreadAdminCount:0,unreadFarmerCount:0})},clearFarmerNotificationsOnLogout:o=>{e(t=>{const{[o]:r,...n}=t.farmerNotifications,a=(r||[]).filter(i=>!i.read).length;return{farmerNotifications:n,unreadFarmerCount:Math.max(0,t.unreadFarmerCount-a)}})},forceClearFarmerNotifications:o=>{try{const t=localStorage.getItem("notification-storage");if(t){const r=JSON.parse(t);r.state&&r.state.farmerNotifications&&(delete r.state.farmerNotifications[o],localStorage.setItem("notification-storage",JSON.stringify(r)))}}catch(t){console.error("Error clearing notifications from localStorage:",t)}e(t=>{const{[o]:r,...n}=t.farmerNotifications,a=(r||[]).filter(i=>!i.read).length;return{farmerNotifications:n,unreadFarmerCount:Math.max(0,t.unreadFarmerCount-a)}})}}),{name:"notification-storage"}));export{F as P,h as u};
